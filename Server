import java.io.*;
import java.net.*;
import java.util.*;

public class Server {//run this file first, then the other one
    private static final int PORT = 4567;
    private static final Map<String, String> userDB = new HashMap<>();
    private static final Map<String, ClientHandler> clients = new HashMap<>();

    public static void main(String[] args) throws IOException {
        userDB.put("user1", "pass1");
        userDB.put("user2", "pass2");

        ServerSocket serverSocket = new ServerSocket(PORT);
        System.out.println("Server started on port " + PORT);

        while (true) {
            Socket socket = serverSocket.accept();
            new Thread(new ClientHandler(socket)).start();
        }
    }

    static class ClientHandler implements Runnable {
        private Socket socket;
        private String username;
        private DataInputStream in;
        private DataOutputStream out;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                in = new DataInputStream(socket.getInputStream());
                out = new DataOutputStream(socket.getOutputStream());

                sendLine("Enter username:");
                String user = readLine();
                sendLine("Enter password:");
                String pass = readLine();

                if (userDB.containsKey(user) && userDB.get(user).equals(pass)) {
                    sendLine("Authenticated");
                    this.username = user;
                    clients.put(username, this);
                    broadcast("[" + username + "] has joined.");

                    while (true) {
                        String line = readLine();
                        if (line == null) break;

                        if (line.startsWith("/file ")) {
                            receiveFile(line);
                        } else if (line.startsWith("/msg ")) {
                            String[] parts = line.split(" ", 3);
                            if (parts.length == 3) {
                                sendPrivateMessage(parts[1], "[" + username + "]: " + parts[2]);
                            }
                        } else {
                            broadcast("[" + username + "]: " + line);
                        }
                    }
                } else {
                    sendLine("Authentication Failed");
                    socket.close();
                }
            } catch (IOException e) {
                System.out.println("Client disconnected.");
            } finally {
                if (username != null) {
                    clients.remove(username);
                    broadcast("[" + username + "] has left.");
                }
            }
        }

        private void broadcast(String message) {
            for (ClientHandler client : clients.values()) {
                try {
                    client.sendLine(message);
                } catch (IOException e) {
                    // ignore
                }
            }
        }

        private void sendPrivateMessage(String toUser, String message) throws IOException {
            ClientHandler client = clients.get(toUser);
            if (client != null) {
                client.sendLine(message);
            } else {
                sendLine("User not found.");
            }
        }

        private void receiveFile(String command) throws IOException {
            String[] parts = command.split(" ");
            if (parts.length < 3) return;

            String toUser = parts[1];
            String fileName = parts[2];
            int fileSize = in.readInt();
            byte[] buffer = new byte[fileSize];
            in.readFully(buffer);

            ClientHandler recipient = clients.get(toUser);
            if (recipient != null) {
                recipient.sendLine("/file " + username + " " + fileName);
                recipient.out.writeInt(fileSize);
                recipient.out.write(buffer);
                recipient.out.flush();
                sendLine("File sent to " + toUser);
            } else {
                sendLine("Recipient not online.");
            }
        }

        private void sendLine(String line) throws IOException {
            out.writeUTF(line);
        }

        private String readLine() throws IOException {
            return in.readUTF();
        }
        
    }
}

