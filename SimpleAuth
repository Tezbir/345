import java.io.*;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Scanner;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public class SimpleAuth {
    private static final String FILE = "auth.txt";
    private static final int ITERATIONS = 65536;
    private static final int KEY_LENGTH = 256;
    private static final String ALGORITHM = "PBKDF2WithHmacSHA256";

    public static boolean isRegistered() {
        return new File(FILE).exists();
    }

    public static void register(String username, String password) {
        try {
            byte[] salt = generateSalt();
            String hashedPassword = hashPassword(password, salt);
            String output = "username:" + username + "\npassword_hash:" + hashedPassword;

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE))) {
                writer.write(output);
            }

            System.out.println("User registered and saved to file.");
        } catch (Exception e) {
            System.out.println("Registration failed: " + e.getMessage());
        }
    }

    public static boolean login(String username, String password) {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE))) {
            String fileUser = reader.readLine().split(":", 2)[1];
            String fileHash = reader.readLine().split(":", 2)[1];

            if (!fileUser.equals(username)) {
                System.out.println("Username does not match.");
                return false;
            }

            return validatePassword(password, fileHash);
        } catch (Exception e) {
            System.out.println("Login failed: " + e.getMessage());
            return false;
        }
    }

    private static String hashPassword(String password, byte[] salt) throws Exception {
        PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, KEY_LENGTH);
        SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
        byte[] hash = factory.generateSecret(spec).getEncoded();
        return Base64.getEncoder().encodeToString(salt) + ":" + Base64.getEncoder().encodeToString(hash);
    }

    private static boolean validatePassword(String password, String stored) throws Exception {
        String[] parts = stored.split(":");
        byte[] salt = Base64.getDecoder().decode(parts[0]);
        String expectedHash = hashPassword(password, salt).split(":")[1];
        String storedHash = parts[1];
        return expectedHash.equals(storedHash);
    }

    private static byte[] generateSalt() {
        byte[] salt = new byte[16];
        new SecureRandom().nextBytes(salt);
        return salt;
    }
}
